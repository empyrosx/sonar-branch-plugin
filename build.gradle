/*
 * Copyright (C) 2019 Dmitry Zimichev
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */
plugins {
    id('java')
    id('org.sonarqube') version('2.7')
}

ext {
    sonarVersion = '8.7.0.41497'
    sonarDistributive = "${projectDir}/sonar-distributive"
    sonarLibs = "${sonarDistributive}/sonarqube-${sonarVersion}/lib"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group 'com.github.empyrosx.sonarqube'
version '1.0-SNAPSHOT'

configurations {
    zip
    integTestImplementation.extendsFrom implementation
    integTestRuntimeOnly.extendsFrom runtimeOnly
}

repositories {
    mavenCentral()
    ivy {
        url 'https://binaries.sonarsource.com/'
        patternLayout({ a ->
            artifact '/Distribution/[module]/[module]-[revision].[ext]'
        })
    }

}

dependencies {
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
    compileOnly fileTree(dir: sonarLibs, include: '**/*.jar')
    testCompile fileTree(dir: sonarLibs, include: '**/*.jar')
    integTestImplementation fileTree(dir: sonarLibs, include: '**/*.jar')
    testCompile "org.testcontainers:testcontainers:1.15.1"
    integTestImplementation "org.testcontainers:testcontainers:1.15.1"
    testCompile group: 'junit', name: 'junit', version: '4.12'
    integTestImplementation group: 'junit', name: 'junit', version: '4.12'
    zip "sonarqube:sonarqube:${sonarVersion}@zip"
}

project.afterEvaluate {
    if (file("${sonarLibs}").exists()) {
        return
    }
    println 'Downloading and extracting SonarQube...'
    configurations.zip.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        copy {
            from zipTree(artifact.getFile())
            into "${sonarDistributive}"
        }
    }
}

sourceSets {
    integTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integTest.output.classesDirs
    classpath = sourceSets.integTest.runtimeClasspath
    shouldRunAfter test
}

//check.dependsOn integrationTest